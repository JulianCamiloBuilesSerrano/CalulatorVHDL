LIBRARY IEEE;

USE ieee.std_logic_1164.all;
-------------------------------------------------------
-- digit_1 => indica el primero numero a operar 
-- digit_2 => indica el segundo numero a operar 
-- symbol => idindica la operacion a generar
-- result_1 => indicia el digito de las decenas
-- result_2 => indica el digito de las unidades 
ENTITY selector IS
	PORT(		digit_1				:	IN		STD_LOGIC_VECTOR(3 DOWNTO 0);
				
				digit_2				:	IN		STD_LOGIC_VECTOR(3 DOWNTO 0);
				
				symbol            :  IN    STD_LOGIC_VECTOR(1 DOWNTO 0);
				
				result_1 				:	OUT 	STD_LOGIC_VECTOR(3 DOWNTO 0);
				
				result_2 				:	OUT 	STD_LOGIC_VECTOR(3 DOWNTO 0));
				
END ENTITY selector;
-------------------------------------------------------
ARCHITECTURE behaviour OF calculator IS

SIGNAL      add, s, answer_1, answer_2    :	STD_LOGIC_VECTOR(3 DOWNTO 0);

SIGNAL      Cout, Mayor, Menor            :  STD_LOGIC;

SIGNAL		product								:	STD_LOGIC_VECTOR(7 DOWNTO 0);

BEGIN 


adittion: ENTITY work.sum4bits PORT MAP(a => digit_1, b => digit_2, Cin => '0', s => add, Cout => Cout);

substraction: ENTITY work.sum4bits PORT MAP(a => digit_1, b => digit_2, Cin => '1', s => s, Cout => Cout);

multiplication: ENTITY work.multiply PORT MAP(a => digit_1, b => digit_2,product => product);

decision: ENTITY work.mayor_o_menor PORT MAP(A => digit_1, B => digit_2, Mayor => Mayor, Menor => Menor);

--number_3 <= "0111111" WHEN Mayor = '0' 
                      
       --ELSE "1111111" WHEN Mayor = '1';
		 
selection: PROCESS(symbol)

BEGIN
-- 1.se evalua si es es suma
-- 2.se evalua si es es resta
-- 3.evalua si es multiplication
IF (symbol = "11") THEN 

 answer_2 <= add;

ELSIF (symbol = "01") THEN 

 answer_2 <= s;

END IF;

END PROCESS selection;

END behaviour;